#rm -rf $HOME/vault
mkdir -p $HOME/vault/{config,file,logs,data,certs,pki,scripts}
docker exec -it vault vault operator init -key-shares=1 -key-threshold=3 -format=json > $HOME/vault/config/vault-cluster.json

cat << 'EOF' > $HOME/vault/config/config.hcl
default_lease_ttl = "168h"
max_lease_ttl = "720h"
ui = true
api_addr = "http://127.0.0.1:8200"
plugin_directory = "/vault/plugins"
log_level = "Debug"

storage "file" {
  path = "/vault/file"
}

listener "tcp" {
  address = "0.0.0.0:8200"
  tls_disable = 1
  tls_cert_file = "/vault/certs/server.vault.crt"
  tls_key_file = "/vault/certs/server.vault.key"
}
EOF

cat << 'EOF' > $HOME/vault/config/configcert.hcl
default_lease_ttl = "168h"
max_lease_ttl = "720h"
ui = true
api_addr = "https://127.0.0.1:8200"
plugin_directory = "/vault/plugins"
log_level = "Debug"

storage "file" {
  path = "/vault/file"
}

listener "tcp" {
  address = "0.0.0.0:8200"
  tls_disable = 0
  tls_cert_file = "/vault/certs/server.vault.crt"
  tls_key_file = "/vault/certs/server.vault.key"
}
EOF

cat << 'EOF' > $HOME/vault/scripts/vault-init.sh
#!/bin/sh

set -ex
apk add jq

echo "Unsealing Vault"
export VAULT_TOKEN=$(jq .root_token /vault/scripts/vault-cluster.json  | awk '/^[^][]/{print $1}' | sed 's/\"//g')
vault operator unseal $(jq .keys_base64 /vault/scripts/vault-cluster.json  | awk '/^[^][]/{print $1}' | sed 's/\"//g')

vault status

PKI_INIT_FILE=/vault/pki/pki.init
if [[ -f "${PKI_INIT_FILE}" ]]; then
   echo "${PKI_INIT_FILE} exists. Vault pki already initialized."
else
   ## Enable PKI Secrets Engine
   vault secrets enable pki
   ## Tune Max Lease TTL for PKI Secrets Engine
   vault secrets tune -max-lease-ttl=876000h pki
   ## Generate Root Certificate
   vault write pki/root/generate/internal common_name=mydomain.io ttl=876000h
   ## Write Root Certificate to File
   vault write -field=certificate pki/root/generate/internal common_name="mydomain-local" issuer_name="vault-pki" ttl=876000h > /vault/pki/vault_root_ca.crt
   ## Create Certificate Role
   vault write pki/roles/mydomain-local allow_any_name=true
   ## Configure PKI URLs
   vault write pki/config/urls issuing_certificates="http://vault:8200/v1/pki/ca" crl_distribution_points="http://vault:8200/v1/pki/crl"

   ## Enable Intermediate PKI Secrets Engine
   vault secrets enable -path=pki_int pki
   ## Tune Max Lease TTL for Intermediate PKI Secrets Engine
   vault secrets tune -max-lease-ttl=876000h pki_int
   ## Generate Intermediate CSR (Certificate Signing Request)
   vault write -field=csr pki_int/intermediate/generate/internal common_name="MyDomain Local Intermediate Authority" issuer_name="mydomain-local-intermediate" > /vault/pki/pki_intermediate.csr
   ## Display Intermediate CSR
   cat /vault/pki/pki_intermediate.csr
   ## Sign Intermediate CSR with Root Certificate
   vault write -field=certificate pki/root/sign-intermediate issuer_ref="vault-pki" csr=@/vault/pki/pki_intermediate.csr format=pem_bundle ttl="876000h" > /vault/pki/intermediate.cert.pem
   ## Set Signed Intermediate Certificate
   vault write pki_int/intermediate/set-signed certificate=@/vault/pki/intermediate.cert.pem

   ## Create server role
   vault write pki_int/roles/server issuer_ref="$(vault read -field=default pki_int/config/issuers)" allowed_domains=localhost,127.0.0.1,host.docker.internal allow_subdomains=true allow_bare_domains=true require_cn=false server_flag=true max_ttl=8670h

   ## Create client role
   vault write pki_int/roles/client issuer_ref="$(vault read -field=default pki_int/config/issuers)" require_cn=false client_flag=true allow_any_name=true max_ttl=8670h

   touch ${PKI_INIT_FILE}
fi
EOF

cat << 'EOF' > $HOME/vault/scripts/vault-init-cert.sh
#!/bin/sh

set -ex
apk add jq

echo "Unsealing Vault"
export VAULT_TOKEN=$(jq .root_token /vault/scripts/vault-cluster.json  | awk '/^[^][]/{print $1}' | sed 's/\"//g')
vault operator unseal $(jq .keys_base64 /vault/scripts/vault-cluster.json  | awk '/^[^][]/{print $1}' | sed 's/\"//g')

vault status
EOF
